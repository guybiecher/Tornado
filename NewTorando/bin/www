#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('untitled1:server');
var http = require('http');
var mysql = require('mysql');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Mysql Connection
 *
 */

function createConnection() {
  var connection = mysql.createConnection({
    host: 'sql7.freemysqlhosting.net',
    user: 'sql7132742',
    password: 'EaR8E1zFeW',
    database: 'sql7132742'
  });

  connection.connect();
  return connection
}

/**
 *  Socket.io code
 */
var io = require('socket.io').listen(server);
var Promise = require('promise')


io.sockets.on('connection', function (socket) {
    socket.on('send_msg', function (data , lang) {
        console.log('msg recieved');
        translateMeesage(data ,lang).then(
            function (value) {
                console.log(value)
                io.sockets.emit('new_msg', value);
            }, function (reason) {
                console.error("Cant translate the message")
                io.sockets.emit('new_msg', "Cant translate the message")
            }
        )
        console.log('msg sent');
        //socket.broadcast.emit(new_msg, data); --> send message to all users EXCEPT ME connected to the chat, can be used for groups later on
    });

    socket.on('new socket', function(data, err){
        if(err){
            console.log('socket request: new socket failed');
        } else {
            var connection = createConnection();
            var qry = "UPDATE Users SET status=1, socket_id = ? WHERE user=?";
            var userQery = '' + data;
            connection.query(qry,[socket.id, userQery], function(err,row){
                if(err){
                    console.log('query failed');
                }
            });
            connection.end();
        }
    });
});


function translateMeesage(data , language) {
    return new Promise(
        function (resolve, reject) {
            var key = 'trnsl.1.1.20160826T142745Z.8d420fa138bc4da9.865d6e5947ccfdbd6e683f21f32abf96cd8e4e07'
            var translate = require('yandex-translate')(key);
            translate.translate(data, {to: language}, function (err, res) {
                if (err) {
                    console.log(err)
                    reject("failed to translate");
                } else {
                    console.log("message translate")
                    resolve(res.text);
                }
            })
        })
}
